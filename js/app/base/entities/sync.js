var slice = [].slice;

define(['app/app'], function(App) {
  var _sync, methods;
  _sync = Backbone.sync;
  Backbone.sync = function(method, model, options) {
    var _error, data, sync;
    if (options == null) {
      options = {};
    }
    _.defaults(options, {
      beforeSend: _.bind(methods.beforeSend, model),
      complete: _.bind(methods.complete, model)
    });
    _error = options.error;
    options.error = function() {
      var args, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (_error) {
        _error.apply(null, args);
      }
      return (ref = App.vent).trigger.apply(ref, ['model:error', model].concat(slice.call(args)));
    };
    if (options.data === null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      options.contentType = 'application/json';
      if (model.paramRoot) {
        data = {};
        data[model.paramRoot] = model.toJSON(options);
      }
      data || (data = model.toJSON(options));
      options.data = JSON.stringify(data);
    }
    sync = _sync(method, model, options);
    if (!model._fetch) {
      return model._fetch = sync.promise();
    }
  };
  methods = {
    beforeSend: function() {
      return this.trigger("sync:start", this);
    },
    complete: function() {
      return this.trigger("sync:stop", this);
    }
  };
  return App.module("Entities", function(Entities, App, Backbone, Marionette, $, _) {
    return App.commands.setHandler("when:fetched", function(entities, callback) {
      var xhrs;
      xhrs = _.chain([entities]).flatten().pluck("_fetch").value();
      return $.when.apply($, xhrs).done(function() {
        return callback();
      });
    });
  });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9iYXNlL2VudGl0aWVzL3N5bmMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQUEsTUFBQSxDQUFPLENBQUMsU0FBRCxDQUFQLEVBQW9CLFNBQUMsR0FBRDtBQUlsQixNQUFBO0VBQUEsS0FBQSxHQUFRLFFBQVEsQ0FBQztFQUVqQixRQUFRLENBQUMsSUFBVCxHQUFnQixTQUFDLE1BQUQsRUFBUyxLQUFULEVBQWdCLE9BQWhCO0FBR2QsUUFBQTs7TUFIOEIsVUFBVTs7SUFHeEMsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxPQUFYLEVBQ0U7TUFBQSxVQUFBLEVBQVksQ0FBQyxDQUFDLElBQUYsQ0FBTyxPQUFPLENBQUMsVUFBZixFQUE0QixLQUE1QixDQUFaO01BQ0EsUUFBQSxFQUFZLENBQUMsQ0FBQyxJQUFGLENBQU8sT0FBTyxDQUFDLFFBQWYsRUFBNEIsS0FBNUIsQ0FEWjtLQURGO0lBS0EsTUFBQSxHQUFTLE9BQU8sQ0FBQztJQUNqQixPQUFPLENBQUMsS0FBUixHQUFnQixTQUFBO0FBQ2QsVUFBQTtNQURlO01BQ2YsSUFBbUIsTUFBbkI7UUFBQSxNQUFBLGFBQU8sSUFBUCxFQUFBOzthQUNBLE9BQUEsR0FBRyxDQUFDLElBQUosQ0FBUSxDQUFDLE9BQVQsWUFBaUIsQ0FBQSxhQUFBLEVBQWUsS0FBTyxTQUFBLFdBQUEsSUFBQSxDQUFBLENBQXZDO0lBRmM7SUFLaEIsSUFBRyxPQUFPLENBQUMsSUFBUixLQUFnQixJQUFoQixJQUF5QixLQUF6QixJQUFtQyxDQUFDLE1BQUEsS0FBVSxRQUFWLElBQXNCLE1BQUEsS0FBVSxRQUFoQyxJQUE0QyxNQUFBLEtBQVUsT0FBdkQsQ0FBdEM7TUFFRSxPQUFPLENBQUMsV0FBUixHQUFzQjtNQUN0QixJQUFHLEtBQUssQ0FBQyxTQUFUO1FBQ0UsSUFBQSxHQUFPO1FBQ1AsSUFBSyxDQUFBLEtBQUssQ0FBQyxTQUFOLENBQUwsR0FBd0IsS0FBSyxDQUFDLE1BQU4sQ0FBYSxPQUFiLEVBRjFCOztNQUlBLFNBQUEsT0FBUyxLQUFLLENBQUMsTUFBTixDQUFhLE9BQWI7TUFDVCxPQUFPLENBQUMsSUFBUixHQUFlLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixFQVJqQjs7SUFXQSxJQUFBLEdBQU8sS0FBQSxDQUFNLE1BQU4sRUFBYyxLQUFkLEVBQXFCLE9BQXJCO0lBQ1AsSUFBRyxDQUFDLEtBQUssQ0FBQyxNQUFWO2FBQ0UsS0FBSyxDQUFDLE1BQU4sR0FBZSxJQUFJLENBQUMsT0FBTCxDQUFBLEVBRGpCOztFQTFCYztFQTZCaEIsT0FBQSxHQUNFO0lBQUEsVUFBQSxFQUFZLFNBQUE7YUFDVixJQUFDLENBQUEsT0FBRCxDQUFTLFlBQVQsRUFBdUIsSUFBdkI7SUFEVSxDQUFaO0lBR0EsUUFBQSxFQUFVLFNBQUE7YUFDUixJQUFDLENBQUEsT0FBRCxDQUFTLFdBQVQsRUFBc0IsSUFBdEI7SUFEUSxDQUhWOztTQVNGLEdBQUcsQ0FBQyxNQUFKLENBQVcsVUFBWCxFQUF1QixTQUFDLFFBQUQsRUFBVyxHQUFYLEVBQWdCLFFBQWhCLEVBQTBCLFVBQTFCLEVBQXNDLENBQXRDLEVBQXlDLENBQXpDO1dBRXJCLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBYixDQUF3QixjQUF4QixFQUF3QyxTQUFDLFFBQUQsRUFBVyxRQUFYO0FBQ3RDLFVBQUE7TUFBQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLEtBQUYsQ0FBUSxDQUFDLFFBQUQsQ0FBUixDQUFtQixDQUFDLE9BQXBCLENBQUEsQ0FBNkIsQ0FBQyxLQUE5QixDQUFvQyxRQUFwQyxDQUE2QyxDQUFDLEtBQTlDLENBQUE7YUFFUCxDQUFDLENBQUMsSUFBRixVQUFPLElBQVAsQ0FBZSxDQUFDLElBQWhCLENBQXFCLFNBQUE7ZUFDbkIsUUFBQSxDQUFBO01BRG1CLENBQXJCO0lBSHNDLENBQXhDO0VBRnFCLENBQXZCO0FBN0NrQixDQUFwQiIsImZpbGUiOiJhcHAvYmFzZS9lbnRpdGllcy9zeW5jLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lIFsnYXBwL2FwcCddLCAoQXBwKSAtPlxuICAjXG4gICMgUmVwbGFjZSBzeW5jIG1ldGhvZFxuICAjXG4gIF9zeW5jID0gQmFja2JvbmUuc3luY1xuXG4gIEJhY2tib25lLnN5bmMgPSAobWV0aG9kLCBtb2RlbCwgb3B0aW9ucyA9IHt9KSAtPlxuXG4gICAgIyBBZGQgYmVmb3JlIGFuZCBjb21wbGV0ZSBhY3Rpb25zXG4gICAgXy5kZWZhdWx0cyBvcHRpb25zLFxuICAgICAgYmVmb3JlU2VuZDogXy5iaW5kKG1ldGhvZHMuYmVmb3JlU2VuZCwgIG1vZGVsKVxuICAgICAgY29tcGxldGU6ICAgXy5iaW5kKG1ldGhvZHMuY29tcGxldGUsICAgIG1vZGVsKVxuXG4gICAgIyBFeHRlbmQgZGVmYXVsdHMgZXJyb3JzXG4gICAgX2Vycm9yID0gb3B0aW9ucy5lcnJvclxuICAgIG9wdGlvbnMuZXJyb3IgPSAoYXJncy4uLikgLT5cbiAgICAgIF9lcnJvcihhcmdzLi4uKSBpZiBfZXJyb3JcbiAgICAgIEFwcC52ZW50LnRyaWdnZXIgJ21vZGVsOmVycm9yJywgbW9kZWwsIGFyZ3MuLi5cblxuICAgICMgV3JhcCBtb2RlbCBkYXRhIHRvIHBhcmFtUm9vdCBpZiBuZWVkZWRcbiAgICBpZiBvcHRpb25zLmRhdGEgaXMgbnVsbCBhbmQgbW9kZWwgYW5kIChtZXRob2QgaXMgJ2NyZWF0ZScgfHwgbWV0aG9kIGlzICd1cGRhdGUnIHx8IG1ldGhvZCBpcyAncGF0Y2gnKVxuXG4gICAgICBvcHRpb25zLmNvbnRlbnRUeXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICBpZiBtb2RlbC5wYXJhbVJvb3RcbiAgICAgICAgZGF0YSA9IHt9XG4gICAgICAgIGRhdGFbbW9kZWwucGFyYW1Sb290XSA9IG1vZGVsLnRvSlNPTihvcHRpb25zKVxuXG4gICAgICBkYXRhIHx8PSBtb2RlbC50b0pTT04ob3B0aW9ucylcbiAgICAgIG9wdGlvbnMuZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpXG5cbiAgICAjIEV4dGVuZCBzdGFuZGFydCBzeW5jIG1ldGhvZFxuICAgIHN5bmMgPSBfc3luYyhtZXRob2QsIG1vZGVsLCBvcHRpb25zKVxuICAgIGlmICFtb2RlbC5fZmV0Y2hcbiAgICAgIG1vZGVsLl9mZXRjaCA9IHN5bmMucHJvbWlzZSgpXG5cbiAgbWV0aG9kcyA9XG4gICAgYmVmb3JlU2VuZDogLT5cbiAgICAgIEB0cmlnZ2VyIFwic3luYzpzdGFydFwiLCBAXG5cbiAgICBjb21wbGV0ZTogLT5cbiAgICAgIEB0cmlnZ2VyIFwic3luYzpzdG9wXCIsIEBcblxuICAjXG4gICMgUmVnaXN0ZXIgZ2xvYmFsIGNvbW1hbmRzXG4gICNcbiAgQXBwLm1vZHVsZSBcIkVudGl0aWVzXCIsIChFbnRpdGllcywgQXBwLCBCYWNrYm9uZSwgTWFyaW9uZXR0ZSwgJCwgXykgLT5cblxuICAgIEFwcC5jb21tYW5kcy5zZXRIYW5kbGVyIFwid2hlbjpmZXRjaGVkXCIsIChlbnRpdGllcywgY2FsbGJhY2spIC0+XG4gICAgICB4aHJzID0gXy5jaGFpbihbZW50aXRpZXNdKS5mbGF0dGVuKCkucGx1Y2soXCJfZmV0Y2hcIikudmFsdWUoKVxuXG4gICAgICAkLndoZW4oeGhycy4uLikuZG9uZSAtPlxuICAgICAgICBjYWxsYmFjaygpXG4iXX0=
